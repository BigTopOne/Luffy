apply plugin: 'com.android.application'
apply plugin: 'apk.move.plugin'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.0"

    defaultConfig {
        applicationId "com.mmc.sample"
        minSdkVersion 14
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile project(':annotation')
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.android.support:design:25.3.1'
    compile 'com.android.support:support-v4:25.3.1'
    compile 'com.android.support:recyclerview-v7:25.4.0'
}


import com.xixi.plugin.tracking.AutoMethodVisitor
import org.objectweb.asm.AnnotationVisitor
import org.objectweb.asm.MethodVisitor

xiaoqingwa {
    name = "小傻逼"
    isDebug = true
    //具体配置
    matchData = [
            //是否使用注解来找对应方法
            'isAnotation'  : true,
            //方法的匹配，可以通过类名或者实现的接口名匹配
            'ClassFilter'  : [
                    ['ClassName' : '', 'InterfaceName': 'android/view/View$OnClickListener',
                     'MethodName': 'setUserVisibleHint', 'MethodDes': '(Landroid/support/v4/app/Fragment;Z)V']
            ],
            //插入的字节码，方法的执行顺序visitAnnotation->onMethodEnter->onMethodExit
            'MethodVisitor': {
                MethodVisitor methodVisitor, int access, String name, String desc ->
                    MethodVisitor adapter = new AutoMethodVisitor(methodVisitor, access, name, desc) {
                        boolean isAnnotation = false

                        @Override
                        protected void onMethodEnter() {
                            super.onMethodEnter()
                            //使用注解找对应方法的时候得加这个判断
//                            if (!isAnnotation){
//                                return
//                            }
                        }

                        @Override
                        protected void onMethodExit(int opcode) {
                            super.onMethodExit(opcode)
                            //使用注解找对应方法的时候得加这个判断
                            if (!isAnnotation) {
                                return
                            }
                            // INVOKESTATIC
                            methodVisitor.visitMethodInsn(184, "com/xishuang/plugintest/AutoHelper", "onClick", "()V", false)
                        }

                        /**
                         * 需要通过注解的方式加字节码才会重写这个方法来进行条件过滤
                         */
                        @Override
                        AnnotationVisitor visitAnnotation(String des, boolean visible) {
                            if (des == 'Lcom/xishuang/annotation/AutoCount;') {
                                println "注解匹配：" + des
                                isAnnotation = true
                            }
                            return super.visitAnnotation(des, visible)
                        }
                    }
                    return adapter
            }
    ]
}
